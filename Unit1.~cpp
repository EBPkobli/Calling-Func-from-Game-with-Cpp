//---------------------------------------------------------------------------

#include <vcl.h>
#include <windows.h>
#include <Unit2.h>
#pragma hdrstop
//---------------------------------------------------------------------------
//   Important note about DLL memory management when your DLL uses the
//   static version of the RunTime Library:
//
//   If your DLL exports any functions that pass String objects (or structs/
//   classes containing nested Strings) as parameter or function results,
//   you will need to add the library MEMMGR.LIB to both the DLL project and
//   any other projects that use the DLL.  You will also need to use MEMMGR.LIB
//   if any other projects which use the DLL will be performing new or delete
//   operations on any non-TObject-derived classes which are exported from the
//   DLL. Adding MEMMGR.LIB to your project will change the DLL and its calling
//   EXE's to use the BORLNDMM.DLL as their memory manager.  In these cases,
//   the file BORLNDMM.DLL should be deployed along with your DLL.
//
//   To avoid using BORLNDMM.DLL, pass string information using "char *" or
//   ShortString parameters.
//
//   If your DLL uses the dynamic version of the RTL, you do not need to
//   explicitly add MEMMGR.LIB as this will be done implicitly for you
//---------------------------------------------------------------------------

#pragma argsused

DWORD WINAPI Fonksiyon1( LPVOID lpParam )
{
        Application->Initialize();
        Application->CreateForm(__classid(TForm2), &Form2);
        Application->Run();
        return 0;
}
DWORD WINAPI Fonksiyon2( LPVOID lpParam )
{
        while(true)
        {
          if(Form2!=NULL)
          {
             if(Form2->MesajVar)
             {
                ((void(__cdecl*)(const char* string))0x46b060)("Furkan Kubilay");
                Form2->MesajVar=false;
             }
          }
        }
}

HANDLE H1;
HANDLE H2;
int WINAPI DllEntryPoint(HINSTANCE hinst, unsigned long reason, void* lpReserved)
{
        switch(reason)
        {

               case 0x0:
               SuspendThread(H1);
               SuspendThread(H2);
               break;
               case 0x1:  //Giriþ 0x0 Çýkýþ
                H1=CreateThread(NULL,0,Fonksiyon1,NULL,0,0);
                H2=CreateThread(NULL,0,Fonksiyon2,NULL,0,0);
               break;

        }
        return 1;
}
//---------------------------------------------------------------------------
 